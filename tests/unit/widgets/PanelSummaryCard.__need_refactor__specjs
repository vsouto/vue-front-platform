import { shallowMount, createLocalVue } from "@vue/test-utils"
import BootstrapVue from "bootstrap-vue"
import { Tooltip, Row, Col } from "element-ui"
import PanelSummaryCard from "@/components/widgets/PanelSummaryCard"
import LoadingAnimation from "@/components/shared/LoadingAnimation"
import { Card } from "@/components/lib"
import FormattersMixin from "@/components/shared/mixins/FormattersMixin"
import PanelStatsMixin from "@/components/shared/mixins/PanelStatsMixin"
import Vuex from "vuex"
import { predefinedDates as DATES } from "@/utils/dates"
import VueMoment from "vue-moment"
import moment from "moment-timezone"


const localVue = createLocalVue()
localVue.component("loading", LoadingAnimation)
localVue.component("el-row", Row)
localVue.component("el-col", Col)
localVue.component("el-tooltip", Tooltip)
localVue.component(Card.name, Card)
localVue.use(VueMoment, {
  moment
})
localVue.use(Vuex)
localVue.use(BootstrapVue)
localVue.mixin(FormattersMixin)
localVue.mixin(PanelStatsMixin)

const panel = {
  panel_id: "test"
}

const widgetStats = {
  summary_custom_date: {
    "id": "summary_custom_date",
    "stats_list": [
      {
        "date": "2019-07-06 00:00:00+00:00",
        "monetizze_credit_card_sales": 1,
        "monetizze_credit_card_earn": 1,
        "google_adsense_earn": 1,
        "monetizze_earn": 2,
        "monetizze_sales": 1,
        "monetizze_billet_earn": 1,
        "facebook_ads_spend": 1,
        "monetizze_billet_sales": 1
      },
      {
        "date": "2019-07-05 00:00:00+00:00",
        "monetizze_credit_card_sales": 1,
        "monetizze_credit_card_earn": 1,
        "google_adsense_earn": 1,
        "monetizze_earn": 2,
        "monetizze_sales": 1,
        "monetizze_billet_earn": 1,
        "facebook_ads_spend": 1,
        "monetizze_billet_sales": 1
      }
    ],
    "in_sync": false,
    "stats_aggregated": {
      "monetizze_credit_card_sales": 2,
      "monetizze_credit_card_earn": 2,
      "google_adsense_earn": 2,
      "monetizze_earn": 4,
      "monetizze_sales": 2,
      "monetizze_billet_earn": 2,
      "facebook_ads_spend": 2,
      "monetizze_billet_sales": 2
    },
    "date_list": [
      "2019-07-05",
      "2019-07-06"
    ],
    "percent_ready": 1,
    "in_sync_dates": []
  }
}

const currencyRates = {
  BRLxUSD: 0.5,
  USDxBRL: 2
}

const date = {
  start: DATES.month_first_day,
  end: DATES.now
}

const store = new Vuex.Store({
  state: {
    fetch_control: {},
    errored_control: {}
  },
  getters: {
    isFetching: state => attr => state.fetch_control[attr] && state.fetch_control[attr] == "fetching"
  },
  modules: {
    account: {
      namespaced: true,
      getters: {
        currencyRates: () => currencyRates
      }
    },
    panel: {
      namespaced: true,
      getters: {
        selectedDate: () => date,
        getPanelById: () => () => panel,
        getWidgetStatsPanelId: () => () => widgetStats
      }
    }
  }
})

const wrapper = shallowMount(PanelSummaryCard, {
  localVue,
  store,
  propsData: {
    title: "Panel name",
    dateRangeString: "05/07/2019 - 06/07/2019",
    id: "panel-id"
  },
  mocks: {
    $t: jest.fn()
  }
})

describe("PanelSummaryCard.vue", () => {
  it("is PanelSummaryCard", () => {
    expect(wrapper.is(PanelSummaryCard)).toBe(true)
  })
  it("computed should have valid values", () => {
    expect(wrapper.vm.isReady).toEqual(true)
    expect(wrapper.vm.isInSync).toEqual(false)
    expect(wrapper.vm.earn).toEqual(8)
    expect(wrapper.vm.spend).toEqual(2)
    expect(wrapper.vm.revenue).toEqual(6)
    expect(wrapper.vm.roi).toEqual(3)
    expect(wrapper.vm.revenueVariant).toEqual("text-success")
    expect(wrapper.vm.roiVariant).toEqual("text-success")
  })
})
