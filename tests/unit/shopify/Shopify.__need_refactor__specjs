import Vuex from "vuex"
import BootstrapVue from "bootstrap-vue"

import {
  shallowMount,
  createLocalVue
} from "@vue/test-utils"
import Shopify from "@/shopify/views/home"
import LoadingAnimation from "@/components/shared/LoadingAnimation"
import {
  BaseButton, BaseInput, Card
} from "@/components/lib"
import {
  accounts
} from "../../data/google-analytics"

const localVue = createLocalVue()
localVue.component("loading", LoadingAnimation)
localVue.component(BaseInput.name, BaseInput)
localVue.component(BaseButton.name, BaseButton)
localVue.component(Card.name, Card)
localVue.use(Vuex)
localVue.use(BootstrapVue)

const $router = {
  replace: jest.fn(),
  push: jest.fn()
}

const $route = {
  path: "/shopify/",
  query: {
    error_title: "",
    error_message: ""
  }
}

const actions = {
  fetchAccounts: jest.fn(),
  authorizeAccount: jest.fn(),
  deleteAccount: jest.fn()
}

let state = {
  accounts: accounts(),
  accounts_fetched: true
}

const store = new Vuex.Store({
  state: {
    isLoading: false,
  },
  getters: {
    isLoading: state => state.isLoading
  },
  modules: {
    shopify: {
      namespaced: true,
      state: state,
      getters: {
        accounts: state => state.accounts,
        accounts_fetched: state => state.accounts_fetched,
      },
      actions,
    }
  }
})

const wrapper = shallowMount(Shopify, {
  localVue,
  store,
  mocks: {
    $router,
    $route,
    $notify: jest.fn(),
    $refs: {
      shopifyRemove: {
        show: jest.fn(),
        hide: jest.fn()
      }
    },
    $t: jest.fn()
  }
})

describe("Shopify.vue", () => {
  it("is Shopify", () => {
    expect(wrapper.is(Shopify)).toBe(true)
  })
  it("should prefetch data", () => {
    expect(actions.fetchAccounts).toHaveBeenCalled()
  })
  it("computed should have valid values", () => {
    expect(wrapper.vm.isLoading).toBe(false)
    expect(wrapper.vm.accounts.length).toBe(2)
  })
  it("should render correct template", () => {
    expect(wrapper.find("#Shopify").exists()).toBe(true)
  })

  it("should call correct actions", async () => {
    wrapper.setData({
      shopName: "store"
    })
    wrapper.vm.authorizeNewAccount({})
    expect(actions.authorizeAccount).toHaveBeenCalled()
    await wrapper.vm.remove()
    expect(actions.deleteAccount).toHaveBeenCalled()
  })
})
