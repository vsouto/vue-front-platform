import Vuex from "vuex"
import BootstrapVue from "bootstrap-vue"
import AccountsTable from "@/components/monetizze/AccountsTable"
import LoadingAnimation from "@/components/shared/LoadingAnimation"
import {
  shallowMount,
  createLocalVue
} from "@vue/test-utils"
import VueRouter from "vue-router"
import {
  accounts
} from "../../data/google-adsense"
import {
  options
} from "@/constants/monetizze"
import { Card } from "@/components/lib"
import * as rootGetters from "@/store/getters"

const localVue = createLocalVue()
localVue.component("loading", LoadingAnimation)
localVue.component(Card.name, Card)
localVue.use(VueRouter)
localVue.use(Vuex)
const router = new VueRouter()
localVue.use(BootstrapVue)

const store = new Vuex.Store({
  state: {
    isLoading: false,
    errored_control: {},
    fetch_control: {
      "monetizze/getAccounts": "fetched"
    }
  },
  getters: rootGetters,
})

const wrapper = shallowMount(AccountsTable, {
  localVue,
  router,
  store,
  propsData: {
    accounts: accounts(),
    columns: ["id", "name", "products"],
    options: options,
    tableFieldsProducts: [{
      key: "picture",
      label: "Imagem",
      class: "text-center"
    },
    {
      key: "name",
      label: "Nome"
    }
    ]
  },
  mocks: {
    $t: jest.fn()
  }
})

describe("AccountsTable.vue", () => {
  it("is AccountsTable", () => {
    expect(wrapper.is(AccountsTable)).toBe(true)
  })
  it("computed should have valid values", () => {
    expect(wrapper.vm.computedTableData).toEqual(accounts())
    expect(wrapper.vm.isReady).toBe(true)
  })
  it("setAccountToDelete method", () => {
    wrapper.vm.setAccountToDelete({})
    expect(wrapper.emitted()["set-account-to-delete"]).toEqual([[{}]])
  })
})
